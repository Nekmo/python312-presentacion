
.. toctree::
   :glob:
   :hidden:

   *

.. _intro:

#####################################
¬øQu√© hay de nuevo en **Python 3.12**?
#####################################

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. image:: images/python-logo.*
  :width: 200

.. revealjs-notes::

  Hola a todos.



üëã
==

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

  Tal vez algunos me reconozc√°is de la charla que di el a√±o pasado aqu√≠ mismo


Python 3.11
===========

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

    Sobre Python 3.11. Parece que se est√° convirtiendo en una tradici√≥n.


Python 3.13
===========

**?**

.. revealjs-section::
    :data-background-color: #000000
    :data-background-gradient: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(60,60,60,1) 80%)
.. revealjs-notes::

    No s√© si pod√©is adivinar sobre qu√© ir√° la charla del a√±o que viene.



Sobre m√≠ **Nekmo**
==================

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

+------------------------------------+
|                                    |
| .. image:: images/cara.svg         |
|   :width: 200px                    |
|                                    |
| *Programador Python*               |
|                                    |
+------------------------------------+

.. revealjs-notes::

  Pero bueno, dejad de que me presente. Soy Juan Jos√©, m√°s conocido en redes como Nekmo, y llevo programando en
  Python m√°s de media vida.



Python 2.5
----------

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/vintage-bg.jpg
    :data-transition: zoom

.. revealjs-notes::

   Mi primera versi√≥n de Python fue la 2.5. Han pasado ya muchos a√±os, y con cada nueva versi√≥n no
   dejan de traer novedades.



¬øQu√© hay de nuevo en **Python 3.12**?
=====================================

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

   Y ahora, ¬øqu√© hay de nuevo en Python 3.12?


M√°s r√°pido
----------

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/f1-bg.jpg

.. revealjs-notes::

    Vayamos a lo primero, a lo que m√°s suele gustar. Los datos, los n√∫meros, c√≥mo de r√°pido es Python 3.12.



Python m√°s r√°pido
-----------------

.. image:: images/does-python-run-faster-than-c.png
  :width: 100%

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

    Toda esta locura por la velocidad viene ya desde hace unas cuantas versiones, y al ritmo que llev√°bamos, √≠bamos
    a superar a C++ dentro de poco, ¬°imaginad la locura!



7% m√°s r√°pido
-------------

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/speed-bg.jpg

.. revealjs-notes::

    Pero no. Claramente no se pod√≠a mantener ese ritmo. Pero en Python 3.12 tenemos un 7% m√°s de velocidad, que
    sigue estando bastante bien.



Comparativa velocidad
---------------------

.. image:: images/python312-performance.png
  :width: 100%

https://github.com/faster-cpython/benchmarking-public

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

    Ten√©is todos los datos en el enlace en pantalla. Y no, me temo que no puedo responder qu√© pas√≥ con la versi√≥n de
    Windows para que subiese tanto.



Listado  de cambios
-------------------

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-fragments::

    * **PEP 701**: mejorado uso de comillas en f-strings.
    * Mejoradas sugerencias *"tal vez quisiste decir"* en los mensajes de error.
    * **PEP 695**: definir alias para tipos mediante *"type"*.
    * **PEP 692**: utilizar ``TypedDict`` para anotar los ``**kwargs``.
    * **PEP 698**: decorador ``@override`` para indicar m√©todos que sobrescriben.
    * **PEP 684**: implementar un GIL por cada sub-interprete.
    * **PEP 669**: Reducir el impacto de la monitorizaci√≥n en CPython.
    * Soporte para el profiler ``perf`` de Linux.
    * **PEP 688**: Expuesto el protocolo del buffer en Python.
    * **PEP 632**: eliminado paquete ``distutils``.

.. revealjs-notes::

    Pero no todo es velocidad. Vamos a hablar de los cambios que trae esta nueva versi√≥n de Python.



Gracias
-------

.. revealjs-section::
    :data-background-color: #000000
    :data-background-video: _static/applause.mp4
    :data-background-video-loop: true

.. revealjs-notes::

   Y hasta aqu√≠ la charla. Muchas gracias a todos por venir. (PAUSA) Bueno, este es el segundo a√±o que hago esta broma,
   pero ten√≠a que mantener la tradici√≥n. No os preocup√©is, que voy a ahondar en cada uno de estos cambios.



**PEP 701**: mejorado uso de comillas en *f-strings*
====================================================

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> name = 'World'
    >>> f'Hello, {name}!'
    'Hello, World!'

.. revealjs-notes::

   Para quienes no los conozcan, los f-strings son una forma de formatear cadenas de texto que se introdujo en Python
   3.6.


Problema con las **comillas**
-----------------------------

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> songs = ['Take me back to Eden', 'Alkaline', 'Ascensionism']
    >>> f"This is the playlist: {", ".join(songs)}"
    'This is the playlist: Take me back to Eden, Alkaline, Ascensionism'

.. revealjs-notes::

   Hasta ahora, si quer√≠amos utilizar comillas dentro de un f-string, ten√≠amos que usar comillas simples o dobles
   dependiendo de c√≥mo estuviese definido el f-string, ya que si no, se produc√≠a un error de sintaxis. Ahora en
   Python 3.12 este tipo de sintaxis es v√°lida, lo cual antes nos dar√≠a un error.


Encadenar *f-strings* sin l√≠mite
--------------------------------

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> f"{f"{f"{f"{f"{f"{1+1}"}"}"}"}"}"
    '2'

.. revealjs-notes::

    Otra de las ventajas de la nueva implementaci√≥n es que ahora podemos encadenar f-strings sin l√≠mite, ya que antes
    estaba limitado por las diferentes combinaciones que pod√≠amos hacer de las comillas. Igualmente, tambi√©n os digo,
    que pod√°is hacerlo no significa que deb√°is hacerlo. Yo fue ver este ejemplo en la documentaci√≥n oficial y...



Saltar por la ventana
---------------------

.. revealjs-section::
    :data-background-color: #000000
    :data-background-video: _static/jump.mp4
    :data-background-video-loop: true


.. revealjs-notes::

    Querer saltar por la ventana. Pero ahora como poder pod√©is hacerlo, y no os dar√° un error de sintaxis.



Uso de **barra invertida**
--------------------------

.. revealjs-section::
    :data-transition: concave
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> songs = ['Take me back to Eden', 'Alkaline', 'Ascensionism']
    >>> print(f"This is the playlist: {"\n".join(songs)}")
    This is the playlist: Take me back to Eden
    Alkaline
    Ascensionism

.. revealjs-notes::

    Pero sin duda de lo que me ha parecido m√°s interesante es que ahora podemos utilizar la barra invertida dentro de
    las sustituciones del f-string. En versiones anteriores, este mismo ejemplo nos dar√≠a un error de sintaxis.



Mejoras en mensajes de error
----------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-auto-animate:
    :data-auto-animate-duration: 1
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon
   :data-line-numbers: 1-5

    >>> my_string = f"{x z y}" + f"{1 + 1}"
      File "<stdin>", line 1
        (x z y)
         ^^^
    SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?

.. revealjs-notes::

    Pero la nueva implementaci√≥n no s√≥lo ha permitido hacer nuevas cosas. Tambi√©n ha mejorado los mensajes de error.
    En este mensaje de error de Python 3.11, aunque se nos indicaba que hab√≠a un error de sintaxis, no quedaba claro
    d√≥nde del string estaba ocurriendo.



.. revealjs-break::
    :data-auto-animate:
    :data-auto-animate-duration: 1.1
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon
   :data-line-numbers: 1-5

    >>> my_string = f"{x z y}" + f"{1 + 1}"
      File "<stdin>", line 1
        my_string = f"{x z y}" + f"{1 + 1}"
                       ^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?

.. revealjs-notes::

    Pero ahora como pod√©is ver en Python 3.12, se nos indica exactamente d√≥nde est√° ocurriendo el error en el string.
    Pero esta no es la √∫nica mejora que ha habido en los mensajes de error, y vamos a verlo en el siguiente punto.



Mejoradas sugerencias *"tal vez quisiste decir"* en los mensajes de error
=========================================================================

.. revealjs-section::
    :data-transition: slide
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-notes::

   Pablo Galindo, uno de los principales desarrolladores de Python y compatriota, ha sido uno de los principales
   art√≠fices en las mejoras de la accesibilidad de Python con los nuevos mensajes de error. En esta nueva versi√≥n
   no pod√≠a ser menos, y se han incluido un mont√≥n de nuevas sugerencias, las cuales vamos a ver muyyy r√°pido, ya que
   son varias.



**NameError:** tal vez olvidaste importar
-----------------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> sys.version_info
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'sys' is not defined. Did you forget to import 'sys'?

.. revealjs-notes::

   Ahora, si no hemos dormido bien esa noche e intentamos utilizar una variable que no est√° definida y coincide en
   nombre con un m√≥dulo, nos sugerir√° que quiz√°s nos hayamos olvidado de importar ese m√≥dulo.


**NameError:** tal vez olvidaste usar self
------------------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> class A:
    ...     def __init__(self):
    ...         self.blech = 1
    ...
    ...     def foo(self):
    ...         somethin = blech
    ...
    >>> A().foo()
    Traceback (most recent call last):
      File "<stdin>", line 1
        somethin = blech
                   ^^^^^
    NameError: name 'blech' is not defined. Did you mean: 'self.blech'?

.. revealjs-notes::

   Tambi√©n nos puede suceder que si estamos cansados y se nos olvida poner "self" en un m√©todo, nos sugerir√° que
   quiz√°s nos hayamos olvidado de ponerlo.



**SintaxError:** tal vez quisiste usar *"from ... import ..."*?
---------------------------------------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> import a.y.z from b.y.z
    Traceback (most recent call last):
      File "<stdin>", line 1
        import a.y.z from b.y.z
        ^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: Did you mean to use 'from ... import ...' instead?

.. revealjs-notes::

   Vale, ahora levantad la mano quienes program√©is en Javascript o Typescript y hay√°is usado m√≥dulos. ¬øOs hab√©is fijado
   que en Python la forma de importar m√≥dulos es al rev√©s? Eso alguna vez me ha provocado este tipo de error de
   sintaxis, la cual ahora nos avisar√° con un error de sintaxis con la forma correcta.



**ImportError:** No se pudo importar ..., *¬øTal vez quisiste decir ...?*
------------------------------------------------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: pycon

    >>> from collections import chainmap
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ImportError: cannot import name 'chainmap' from 'collections'. Did you mean:
    'ChainMap'?

.. revealjs-notes::

   Finalmente, otra sugerencia para esos d√≠as que estamos despistados, y tenemos un fallo escribiendo el nombre
   de aquello que estamos importando. Ahora, si hay un nombre similar en la importaci√≥n, nos har√° una sugerencia.
   **La verdad es que es genial contar con tantas sugerencias, y es por ello, que m√°s que una pit√≥n, he querido
   proponer una nueva mascota para el int√©rprete**


Nueva **mascota**
-----------------

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. image:: images/clippy.jpg
   :width: 50%
   :align: center

.. revealjs-notes::

   ¬°Clipo! Seguro que as√≠ los tracebacks ser√°n mejor vistos y aceptados.



Typing
======

.. revealjs-section::
    :data-background-color: #FE7E75

.. image:: images/typing.*
   :width: 100%
   :align: center


.. revealjs-notes::

   Y ahora vamos a hablar de las mejoras realizadas en el typing. Aunque Python no sea un lenguaje fuertemente tipado,
   el typing ha llegado para quedarse. ¬øCu√°ntos de vosotros lo utiliz√°is en vuestros proyectos? ¬øPod√©is levantar la
   mano?



**PEP 695**: definir alias para tipos mediante ``type``
=======================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python

    type Point = tuple[float, float]

.. revealjs-notes::

    La primera de las mejoras en el tipado es la posibilidad de definir alias para tipos mediante "type".



Uso de gen√©ricos en ``type``
----------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python

    type Point[T] = tuple[T, T]

.. revealjs-notes::

    Tambi√©n podemos utilizar gen√©ricos en el type, sin necesidad de definirlos previamente, mediante esta nueva
    sintaxis. En este caso, en vez de definirse que los elementos de la tupla deben ser floats, ahora es gen√©rico,
    pudiendo ser cualquier tipo.



Creaci√≥n de clases **gen√©ricas**
--------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python

    class list[T]:
        def __getitem__(self, index: int, /) -> T:
            ...

        def append(self, element: T) -> None:
            ...

.. revealjs-notes::

    Esta nueva forma de sintaxis para definir gen√©ricos tambi√©n puede utilizarse para definir clases gen√©ricas, siendo
    ahora mucho m√°s sencillo.



Creaci√≥n de clases **gen√©ricas antes**
--------------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python

    from typing import TypeVar, Generic

    T = TypeVar("T")

    class list(Generic[T]):
        def __getitem__(self, index: int, /) -> T:
            ...

        def append(self, element: T) -> None:
            ...

.. revealjs-notes::

    A modo de ejemplo, pod√©is ver c√≥mo se defin√≠a antes una clase gen√©rica, teniendo que importar TypeVar y Generic,
    y definir el tipo gen√©rico antes de la clase.



Creaci√≥n de funciones **gen√©ricas**
-----------------------------------

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python

    def max[T](args: Iterable[T]) -> T:
        ...

.. revealjs-notes::

    Por supuesto, esta mejora tambi√©n ha llegado a la creaci√≥n de las funciones gen√©ricas.



Gen√©ricos f√°cil
---------------

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. image:: images/too-easy.*
   :width: 80%
   :align: center

.. revealjs-notes::

    Como pod√©is ver, gracias a todas las novedades que incluye este PEP ahora es mucho m√°s f√°cil y c√≥modo trabajar
    con gen√©ricos.



**PEP 692**: utilizar ``TypedDict`` para anotar los ``**kwargs``
================================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python
    :data-line-numbers: 1-8|7-8|7|3-5

    from typing import TypedDict, Unpack

    class Movie(TypedDict):
        name: str
        year: int

    def foo(**kwargs: Unpack[Movie]):
        ...

.. revealjs-notes::

    Ahora vamos con mi mejora favorita en el typing. (1) Seguro que muchos hab√©is tenido una funci√≥n que recibe
    un mont√≥n de par√°metros, quedando un c√≥digo muy feo. (2) Para solucionarlo, se suelen utilizar los kwargs, pero
    estos no se pod√≠an tipar. (3) Ahora, con esta nueva sintaxis, podemos tiparlo mediante un TypedDict. Esto tiene
    muchas m√°s ventajas, como poder reutilizar el tipado en otras funciones que recibe los mismos par√°metros.



**PEP 698**: decorador ``@override`` para indicar m√©todos que sobrescriben
==========================================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python
    :data-line-numbers: 1-15|4-5|8-10|13-15

    from typing import override

    class Base:
        def get_color(self) -> str:
            return "blue"

    class GoodChild(Base):
        @override  # ok: overrides Base.get_color
        def get_color(self) -> str:
            return "yellow"

    class BadChild(Base):
        @override  # type checker error: does not override Base.get_color
        def get_colour(self) -> str:
            return "red"

.. revealjs-notes::

    Este nuevo decorador es para los muy puristas. (1) Imaginad que tenemos un m√©todo ya definido, que no es obligatorio
    de sobrescribir. (2) El nuevo decorador override nos permite indicar que estamos sobrescribiendo un m√©todo de la
    clase padre. (3) Si no lo estamos sobrescribiendo, ya sea porque lo hemos escrito mal o porque el m√©todo sobrescrito
    ya no existe, nos avisar√° de ello.



Otras **mejoras**
=================

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. image:: images/improvements.*
   :width: 60%
   :align: center

.. revealjs-notes::

    Ahora vamos a pasar a comentar otras mejoras, las cuales no veremos inmediatamente escribiendo c√≥digo, pero que son
    tambi√©n muy importantes.



**PEP 684**: implementar un **GIL** por cada **sub-interprete**
===============================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-notes::

    La primera de ellas es la implementaci√≥n de un GIL por cada sub-interprete. De momento s√≥lo est√° disponible en la
    API de C, pero es s√≥lo un anticipo de lo que llegar√° en Python3.13, pudiendo usarlo desde Python. Esto es muy
    relevante porque nos permitir√° aprovechar m√∫ltiples n√∫cleos en programas con varios sub-interpretes.



**PEP 669**: Reducir el impacto de la **monitorizaci√≥n** en **CPython**
=======================================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-notes::

    Otra importante mejora es la aparici√≥n de una nueva API para monitorizar Python. Los nuevos profilers, debuggers y
    otras herramientas que monitoricen eventos en CPython, podr√°n aprovechar esta nueva API para cubrir un amplio
    rango de eventos en el int√©rprete, con un impacto menor en el rendimiento y aplic√°ndose s√≥lo cuando sea necesario.



Soporte para el profiler ``perf`` de Linux
==========================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. code-block:: bash

    $ python -X perf script.py
    $ perf report -g -i perf.data


.. revealjs-notes::

    Esta mejora es s√≥lo para los usuarios de Linux. Perf es el profiler del Kernel de Linux, y aunque es genial para
    monitorizar el rendimiento de aplicaciones, en Python al usarlo s√≥lo se pod√≠an ver los s√≠mbolos nativos del
    int√©rprete, no los de nuestro programa. Ahora, si lo activamos, podemos ver lo que sucede en nuestra aplicaci√≥n.
    Si os interesa saber m√°s sobre el tema, el autor de este cambio, Pablo Galindo, tiene una charla sobre el tema
    en la PyConES de este a√±o, la cual se lanzar√° pr√≥ximamente en v√≠deo.



**PEP 688**: Expuesto el protocolo del **buffer** en Python
===========================================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-code-block:: python
   :data-line-numbers: 1-10|6-7|9-10|1-10

    class MyBuffer:
        def __init__(self, data: bytes):
            self.data = bytearray(data)
            self.view = None

        def __buffer__(self, flags: int) -> memoryview:
            ...

        def __release_buffer__(self, view: memoryview) -> None:
            ...


.. revealjs-notes::

    Python ofrec√≠a hasta ahora un protocolo para el buffer, pero s√≥lo disponible si hac√≠amos una extensi√≥n en C. Este
    protocolo nos permit√≠a leer y liberar un buffer de memoria, estando ahora tambi√©n disponible en el propio Python.
    (1) Para ello nos ofrece un nuevo m√©todo m√°gico buffer, que nos permite obtener una vista de memoria de nuestro
    objeto. (2) Y otro m√©todo m√°gico para liberar el buffer. (3) Esto es muy √∫til para trabajar con datos binarios,
    como por ejemplo en el caso de la criptograf√≠a.



**PEP 632**: eliminado paquete ``distutils``
============================================

.. revealjs-section::
    :data-background-color: #2b5b84
    :data-background-gradient: linear-gradient(180deg, rgba(10,59,102,1) 0%, rgba(43,91,132,1) 30%)

.. revealjs-notes::

    Y para terminar, tenemos que decir adi√≥s a ``distutils``, un m√≥dulo que llevaba con nosotros desde tiempos
    inmemorables, y que ahora ha sido eliminado. Su eliminaci√≥n es algo que se ha ido retrasando, por el gran n√∫mero
    de paquetes que lo usaban. No obstante, si lo segu√≠s necesitando, sigue estando disponible a trav√©s de
    ``setuptools``.



¬øCu√°l es vuestra **mejora favorita**?
=====================================

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

.. revealjs-notes::

    Y con esto terminamos. ¬øCu√°l es vuestra mejora favorita? Me gustar√≠a poder escuchar vuestras opiniones.



¬°Muchas gracias a todos!
========================

.. revealjs-section::
    :data-background-gradient: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);

.. revealjs-notes::

    ¬°Muchas gracias a todos!



**Contactar**
-------------

.. revealjs-section::
    :data-background-color: #ffffff
    :data-background-image: _static/grid-bg.png
    :data-background-repeat: repeat-x
    :data-background-position: left top
    :data-background-size: auto
    :data-transition: zoom

* üåê **Sitio web:** `nekmo.com <https://nekmo.com>`_
* üì´ **Email:** `contacto@nekmo.com <mailto:contacto@nekmo.com>`_
* üê¶ **Twitter:** `@nekmocom <https://twitter.com/nekmocom>`_
* üì± **Telegram:** `@nekmo <https://t.me/nekmo>`_
* üí° **Jabber:** `nekmo@nekmo.org <xmpp://nekmo@nekmo.org>`_

.. revealjs-notes::

   Aqu√≠ ten√©is mi contacto si quer√©is contactar conmigo.
